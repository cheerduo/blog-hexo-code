{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":1,"renderable":0},{"_id":"themes/A-Boy/source/css/archive.styl","path":"css/archive.styl","modified":1,"renderable":1},{"_id":"themes/A-Boy/source/css/beantech.css","path":"css/beantech.css","modified":1,"renderable":1},{"_id":"themes/A-Boy/source/css/beantech.min.css","path":"css/beantech.min.css","modified":1,"renderable":1},{"_id":"themes/A-Boy/source/css/highlight.styl","path":"css/highlight.styl","modified":1,"renderable":1},{"_id":"themes/A-Boy/source/css/hux-blog.min.css","path":"css/hux-blog.min.css","modified":1,"renderable":1},{"_id":"themes/A-Boy/source/css/rocket.styl","path":"css/rocket.styl","modified":1,"renderable":1},{"_id":"themes/A-Boy/source/css/signature.styl","path":"css/signature.styl","modified":1,"renderable":1},{"_id":"themes/A-Boy/source/css/toc.styl","path":"css/toc.styl","modified":1,"renderable":1},{"_id":"themes/A-Boy/source/css/widget.styl","path":"css/widget.styl","modified":1,"renderable":1},{"_id":"themes/A-Boy/source/fonts/glyphicons-halflings-regular.eot","path":"fonts/glyphicons-halflings-regular.eot","modified":1,"renderable":1},{"_id":"themes/A-Boy/source/fonts/glyphicons-halflings-regular.ttf","path":"fonts/glyphicons-halflings-regular.ttf","modified":1,"renderable":1},{"_id":"themes/A-Boy/source/fonts/glyphicons-halflings-regular.woff","path":"fonts/glyphicons-halflings-regular.woff","modified":1,"renderable":1},{"_id":"themes/A-Boy/source/fonts/glyphicons-halflings-regular.woff2","path":"fonts/glyphicons-halflings-regular.woff2","modified":1,"renderable":1},{"_id":"themes/A-Boy/source/js/bootstrap.min.js","path":"js/bootstrap.min.js","modified":1,"renderable":1},{"_id":"themes/A-Boy/source/js/hux-blog.js","path":"js/hux-blog.js","modified":1,"renderable":1},{"_id":"themes/A-Boy/source/js/hux-blog.min.js","path":"js/hux-blog.min.js","modified":1,"renderable":1},{"_id":"themes/A-Boy/source/js/jquery.nav.js","path":"js/jquery.nav.js","modified":1,"renderable":1},{"_id":"themes/A-Boy/source/js/jquery.tagcloud.js","path":"js/jquery.tagcloud.js","modified":1,"renderable":1},{"_id":"themes/A-Boy/source/js/toc.js","path":"js/toc.js","modified":1,"renderable":1},{"_id":"themes/A-Boy/source/js/totop.js","path":"js/totop.js","modified":1,"renderable":1},{"_id":"source/img/header_img/tag.jpg","path":"img/header_img/tag.jpg","modified":1,"renderable":0},{"_id":"themes/A-Boy/source/css/bootstrap.min.css","path":"css/bootstrap.min.css","modified":1,"renderable":1},{"_id":"themes/A-Boy/source/fonts/glyphicons-halflings-regular.svg","path":"fonts/glyphicons-halflings-regular.svg","modified":1,"renderable":1},{"_id":"themes/A-Boy/source/js/bootstrap.js","path":"js/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/A-Boy/source/js/jquery.min.js","path":"js/jquery.min.js","modified":1,"renderable":1},{"_id":"source/img/avatar/lover.jpg","path":"img/avatar/lover.jpg","modified":1,"renderable":0},{"_id":"source/img/header_img/404.jpg","path":"img/header_img/404.jpg","modified":1,"renderable":0},{"_id":"source/img/header_img/about.jpg","path":"img/header_img/about.jpg","modified":1,"renderable":0},{"_id":"source/img/signature/BeanTechSign-white.png","path":"img/signature/BeanTechSign-white.png","modified":1,"renderable":0},{"_id":"themes/A-Boy/source/css/bootstrap.css","path":"css/bootstrap.css","modified":1,"renderable":1},{"_id":"themes/A-Boy/source/css/images/ironman.png","path":"css/images/ironman.png","modified":1,"renderable":1},{"_id":"themes/A-Boy/source/css/images/rocket.png","path":"css/images/rocket.png","modified":1,"renderable":1},{"_id":"themes/A-Boy/source/js/jquery.js","path":"js/jquery.js","modified":1,"renderable":1},{"_id":"source/img/signature/BeanTechSign-black.png","path":"img/signature/BeanTechSign-black.png","modified":1,"renderable":0},{"_id":"source/img/article_header/article_bg.jpg","path":"img/article_header/article_bg.jpg","modified":1,"renderable":0},{"_id":"source/img/header_img/archive.jpg","path":"img/header_img/archive.jpg","modified":1,"renderable":0},{"_id":"source/img/header_img/archives-widget.jpg","path":"img/header_img/archives-widget.jpg","modified":1,"renderable":0},{"_id":"source/img/article_header/article_header.jpg","path":"img/article_header/article_header.jpg","modified":1,"renderable":0},{"_id":"source/img/header_img/home-bg-o.png","path":"img/header_img/home-bg-o.png","modified":1,"renderable":0},{"_id":"source/img/header_img/home.png","path":"img/header_img/home.png","modified":1,"renderable":0}],"Cache":[{"_id":"source/404.md","hash":"89f7925e4e3bff887ff2961d6812769bd32e798e","modified":1660146428725},{"_id":"source/CNAME","hash":"90e19093ba1f92a7c854432302a6677e4ffa1b3e","modified":1660163856561},{"_id":"source/favicon.ico","hash":"b80d41cc6a04db018bd9e9b346943c3944d9ada5","modified":1660146428725},{"_id":"themes/A-Boy/LICENSE","hash":"2b209f06bebeb2a8c2b7e187e436f3e1e1fbc8a7","modified":1660146428757},{"_id":"themes/A-Boy/_config.yml","hash":"e800e32847df32dacddb5202823a004557023bcd","modified":1660146428757},{"_id":"source/_posts/markdown.md","hash":"54fcd9a889f45dc6bdf54caeb66e13e708eab76c","modified":1660146428725},{"_id":"source/_posts/orphan-zombie.md","hash":"2433b54621896740a039ec74814ddc082175add9","modified":1660146428725},{"_id":"source/about/index.md","hash":"c924484646eee9b873ef7d3c774bf2379eb299f6","modified":1660146428725},{"_id":"source/archive/index.md","hash":"9909e21d5988105063241971d5efd2ab5b8c4a3e","modified":1660146428725},{"_id":"source/tags/index.md","hash":"f3e27748cab401e607e454c3c61e6925d6fdb271","modified":1660146428753},{"_id":"themes/A-Boy/languages_to_be_added/de.yml","hash":"424a9c1e6ab69334d7873f6574da02ca960aa572","modified":1660146428757},{"_id":"themes/A-Boy/languages_to_be_added/default.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1660146428757},{"_id":"themes/A-Boy/languages_to_be_added/en.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1660146428757},{"_id":"themes/A-Boy/languages_to_be_added/es.yml","hash":"cb4eeca0ed3768a77e0cd216300f2b2549628b1b","modified":1660146428757},{"_id":"themes/A-Boy/languages_to_be_added/no.yml","hash":"8ca475a3b4f8efe6603030f0013aae39668230e1","modified":1660146428757},{"_id":"themes/A-Boy/languages_to_be_added/pl.yml","hash":"de7eb5850ae65ba7638e907c805fea90617a988c","modified":1660146428757},{"_id":"themes/A-Boy/languages_to_be_added/ru.yml","hash":"42df7afeb7a35dc46d272b7f4fb880a9d9ebcaa5","modified":1660146428757},{"_id":"themes/A-Boy/languages_to_be_added/zh-CN.yml","hash":"7bfcb0b8e97d7e5edcfca8ab26d55d9da2573c1c","modified":1660146428757},{"_id":"themes/A-Boy/languages_to_be_added/zh-TW.yml","hash":"9acac6cc4f8002c3fa53ff69fb8cf66c915bd016","modified":1660146428757},{"_id":"themes/A-Boy/layout/404.ejs","hash":"40de38bd399f6f4aef0d6c63c7b13b02d74f1c56","modified":1660146428757},{"_id":"themes/A-Boy/layout/about.ejs","hash":"edcf8fa3bf7093c974d418ffef42ac89c19af128","modified":1660146428757},{"_id":"themes/A-Boy/layout/archive.ejs","hash":"72a150c8dff0031a9107d12eaa7c2e6c6ce950d2","modified":1660146428757},{"_id":"themes/A-Boy/layout/index.ejs","hash":"dc8a6eaa00d1e7c33a40979afe0953ed5d7b512e","modified":1660146428757},{"_id":"themes/A-Boy/layout/keynote.ejs","hash":"19a8f768ca1ec9838c251a1a56017a1ec0125155","modified":1660146428757},{"_id":"themes/A-Boy/layout/layout.ejs","hash":"6efee96baaeb079b0abb2642c8d64edf01946a2e","modified":1660146428757},{"_id":"themes/A-Boy/layout/page.ejs","hash":"88c686a95c698f6aa35a44fe4e8d7174a82cdbdd","modified":1660146428757},{"_id":"themes/A-Boy/layout/post.ejs","hash":"6eb36d830afe437915911a4b344e5883a591b816","modified":1660146428757},{"_id":"themes/A-Boy/layout/tags.ejs","hash":"2c72eb2e89130658aa068d80d27b561b509c5dcd","modified":1660146428757},{"_id":"themes/A-Boy/layout/_partial/footer.ejs","hash":"ece021bc17b87f8294181d4009bfaadc4c6c1234","modified":1660146428757},{"_id":"themes/A-Boy/layout/_partial/head.ejs","hash":"b770dadbd7b6bcdde05179841ff5ce5c9e3fde64","modified":1660146428757},{"_id":"themes/A-Boy/layout/_partial/header.ejs","hash":"3bd09df76e0622d76d186b020393fcab361e6c97","modified":1660146428757},{"_id":"themes/A-Boy/layout/_partial/nav.ejs","hash":"b61fbcb1f255712d33ea93395d377cda07bc9da3","modified":1660146428757},{"_id":"themes/A-Boy/layout/_partial/pagination.ejs","hash":"557d6bb069a1d48af49ae912994653f44b32a570","modified":1660146428757},{"_id":"themes/A-Boy/layout/_partial/sidebar.ejs","hash":"2e4e528a555917b2a267da4db2440bcc4a7a65ab","modified":1660146428757},{"_id":"themes/A-Boy/layout/_partial/toc.ejs","hash":"40e11b303df113c64a5ca35b79dd53c824010c09","modified":1660146428757},{"_id":"themes/A-Boy/layout/_widget/archive.ejs","hash":"d0321072e6b305653a9bd29701699529646bb710","modified":1660146428757},{"_id":"themes/A-Boy/layout/_widget/category.ejs","hash":"1cf485def07dc06e870dc9613767c6c614bcf428","modified":1660146428757},{"_id":"themes/A-Boy/layout/_widget/featured-tags.ejs","hash":"2f8feccae6d1f3fb1259701d56159983d8cc2d25","modified":1660146428757},{"_id":"themes/A-Boy/layout/_widget/friends-blog.ejs","hash":"734d3775017aedac185028924baf890a71a74548","modified":1660146428757},{"_id":"themes/A-Boy/layout/_widget/recent-posts.ejs","hash":"7b661fe4c347166fefcad0c1db9877bc2dbbbae1","modified":1660146428757},{"_id":"themes/A-Boy/layout/_widget/short-about.ejs","hash":"004ecb06b0c0fafa997de7847fbbecdecc100aa1","modified":1660146428757},{"_id":"themes/A-Boy/source/css/archive.styl","hash":"715bcbd085eb95ec26c9805c11c374919cde971c","modified":1660146428757},{"_id":"themes/A-Boy/source/css/beantech.css","hash":"4c361354fd8e9851923fb21a620bc079380ebcd8","modified":1660146428757},{"_id":"themes/A-Boy/source/css/beantech.min.css","hash":"05a06230b1a9eca0b30cece54a397008cb77dc50","modified":1660146428757},{"_id":"themes/A-Boy/source/css/highlight.styl","hash":"e842080e6d580f0f70a7df71fbde3c4e49463c19","modified":1660146428757},{"_id":"themes/A-Boy/source/css/hux-blog.min.css","hash":"1baef04de262aeb7023d835429b49a805ac4ab40","modified":1660146428757},{"_id":"themes/A-Boy/source/css/rocket.styl","hash":"e15c51c8566ecd943112e57592888dd318b6fa6a","modified":1660146428757},{"_id":"themes/A-Boy/source/css/signature.styl","hash":"88159b31c59d59c01a0b534af57242662a2a3969","modified":1660146428757},{"_id":"themes/A-Boy/source/css/toc.styl","hash":"3709386f9e6fa2fc76f9cce27f09b86c5ed129be","modified":1660146428757},{"_id":"themes/A-Boy/source/css/widget.styl","hash":"7a9f735f5ef323dc2950fbd9d76daa16c9a0f1a9","modified":1660146428757},{"_id":"themes/A-Boy/source/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1660146428757},{"_id":"themes/A-Boy/source/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1660146428761},{"_id":"themes/A-Boy/source/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1660146428761},{"_id":"themes/A-Boy/source/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1660146428761},{"_id":"themes/A-Boy/source/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1660146428761},{"_id":"themes/A-Boy/source/js/hux-blog.js","hash":"4b4d3c557405d04c3087d36c13e2834fe05c0f73","modified":1660146428761},{"_id":"themes/A-Boy/source/js/hux-blog.min.js","hash":"1563e7f70550ac6b30803d6f449719b853200e35","modified":1660146428761},{"_id":"themes/A-Boy/source/js/jquery.nav.js","hash":"ef2160a456176a4d09cc0b95d52b27dfbbadf2d8","modified":1660146428761},{"_id":"themes/A-Boy/source/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1660146428761},{"_id":"themes/A-Boy/source/js/toc.js","hash":"41e52551731854224c249d53010c1bae5aa92ffa","modified":1660146428761},{"_id":"themes/A-Boy/source/js/totop.js","hash":"c05360f6fc699ac12e794b1764b4a952713a3017","modified":1660146428761},{"_id":"source/img/header_img/tag.jpg","hash":"944ca46f01511f6efc8139edfa90ce2f343cdcd9","modified":1660146428753},{"_id":"themes/A-Boy/source/css/bootstrap.min.css","hash":"fec7b176a4b9a67c0eb5d184f57b84297efc23aa","modified":1660146428757},{"_id":"themes/A-Boy/source/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1660146428757},{"_id":"themes/A-Boy/source/js/bootstrap.js","hash":"f8752e9ae24daec0a0baffd7819122f8c6fd9103","modified":1660146428761},{"_id":"themes/A-Boy/source/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1660146428761},{"_id":"source/img/avatar/lover.jpg","hash":"1432fa2a6183f595fdfbeca4339eb97a291d6883","modified":1660146428729},{"_id":"source/img/header_img/404.jpg","hash":"1dc9175a3574d44078df4fe26804134dbef9408f","modified":1660146428733},{"_id":"source/img/header_img/about.jpg","hash":"cbbd3cd96e97d577aebf7d8d16dff4a3c24a7078","modified":1660146428733},{"_id":"source/img/signature/BeanTechSign-white.png","hash":"34289ed41cf9ddac2d56be46fbb1515b7d5913cd","modified":1660146428753},{"_id":"themes/A-Boy/source/css/bootstrap.css","hash":"41c54bf695145ae0b4d9020a1da308ceb05dcaf3","modified":1660146428757},{"_id":"themes/A-Boy/source/css/images/ironman.png","hash":"2f0db0ab15d466c4065d9f6102fdf829726d9e3f","modified":1660146428757},{"_id":"themes/A-Boy/source/css/images/rocket.png","hash":"6dee0406955aa9b7a261161d30f2538a671e806b","modified":1660146428757},{"_id":"themes/A-Boy/source/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1660146428761},{"_id":"source/img/signature/BeanTechSign-black.png","hash":"94b7102e819fd6ee082d3fb0166f4de7458c22ff","modified":1660146428753},{"_id":"source/img/article_header/article_bg.jpg","hash":"e166e126296bca8af18ec9f83924866c3dc6c272","modified":1660146428729},{"_id":"source/img/header_img/archive.jpg","hash":"4c771f6d6a7299e23bc81db85a3c2f29e067fa35","modified":1660146428733},{"_id":"source/img/header_img/archives-widget.jpg","hash":"424549c591dadd07566fc3c2b2a1f9e2e1f211ab","modified":1660146428737},{"_id":"source/img/article_header/article_header.jpg","hash":"734e37f05703a3aa8be4c61394cb924cf19404b6","modified":1660146428729},{"_id":"source/img/header_img/home-bg-o.png","hash":"c4418661ae0a82442b0b4b411abc01ab53fe64cc","modified":1660146428745},{"_id":"source/img/header_img/home.png","hash":"c4418661ae0a82442b0b4b411abc01ab53fe64cc","modified":1660146428753},{"_id":"public/404.html","hash":"99b15094257728ea12aaa121f5ca5583f9079ebf","modified":1660163874304},{"_id":"public/tags/index.html","hash":"fec270ac46248aa53aeba037d08df1c3e6c62792","modified":1660163874304},{"_id":"public/about/index.html","hash":"8771b971a21ef85c088eea4b4961c88f44c17bd3","modified":1660163874304},{"_id":"public/archive/index.html","hash":"06c1b5555dcb4ec25e1ef220313bd5e22430a53b","modified":1660163874305},{"_id":"public/archives/index.html","hash":"091d601e9c9e089c9c484b29d59f5fcafff6f779","modified":1660163874305},{"_id":"public/archives/2017/index.html","hash":"a0654da382cc6ce4db47736721f6b893c52f0dff","modified":1660163874305},{"_id":"public/archives/2017/08/index.html","hash":"b10a8a0687e069f8ff676726f2176b7f4888a395","modified":1660163874305},{"_id":"public/archives/2018/index.html","hash":"9e8d50547cc13376147d0fb5d04dbc6c2a804867","modified":1660163874305},{"_id":"public/archives/2018/01/index.html","hash":"ee3ebfb33b3c9d537dd2fcec789e7963f19b0ec3","modified":1660163874305},{"_id":"public/index.html","hash":"054d872bac9bf4cde9671d97718d23b6cc9523e0","modified":1660163874305},{"_id":"public/tags/Markdown/index.html","hash":"087787e30ec902f65a050d8bd605d8247cc03e0d","modified":1660163874305},{"_id":"public/tags/Linux/index.html","hash":"33cb35f800bea5340c9aef7fc8f91cba8b6cafff","modified":1660163874305},{"_id":"public/article/orphan-zombie/index.html","hash":"02b14e8c1d8b7c7629102276f46b3fabcaeba2d5","modified":1660163874305},{"_id":"public/article/markdown/index.html","hash":"c8b8007fd8dd50fd751e607780e9ffffe25f9865","modified":1660163874305},{"_id":"public/CNAME","hash":"90e19093ba1f92a7c854432302a6677e4ffa1b3e","modified":1660163874310},{"_id":"public/favicon.ico","hash":"b80d41cc6a04db018bd9e9b346943c3944d9ada5","modified":1660163874310},{"_id":"public/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1660163874310},{"_id":"public/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1660163874310},{"_id":"public/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1660163874311},{"_id":"public/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1660163874311},{"_id":"public/css/images/ironman.png","hash":"2f0db0ab15d466c4065d9f6102fdf829726d9e3f","modified":1660163874311},{"_id":"public/css/images/rocket.png","hash":"6dee0406955aa9b7a261161d30f2538a671e806b","modified":1660163874311},{"_id":"public/img/header_img/tag.jpg","hash":"944ca46f01511f6efc8139edfa90ce2f343cdcd9","modified":1660163874495},{"_id":"public/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1660163874496},{"_id":"public/img/header_img/404.jpg","hash":"1dc9175a3574d44078df4fe26804134dbef9408f","modified":1660163874496},{"_id":"public/css/archive.css","hash":"8db895ebaeff19ac145c961abcfd5d4a8d67a8ea","modified":1660163874501},{"_id":"public/css/highlight.css","hash":"c58b4569c086e477a00dcbf5a95a166fe5fecfb0","modified":1660163874501},{"_id":"public/css/rocket.css","hash":"9456fd92f729e09d6de8cda70f95d78e0d789c70","modified":1660163874501},{"_id":"public/css/signature.css","hash":"820fa4743cea34a61808cd8f7de528605c32d7e3","modified":1660163874501},{"_id":"public/css/toc.css","hash":"a365606bfe49a7c68c32f65b3ae459f3b1f18d65","modified":1660163874502},{"_id":"public/css/widget.css","hash":"da95ad3f1938f24d20f1fa77d7a38f0c392b5ec8","modified":1660163874502},{"_id":"public/js/hux-blog.js","hash":"4b4d3c557405d04c3087d36c13e2834fe05c0f73","modified":1660163874502},{"_id":"public/js/hux-blog.min.js","hash":"1563e7f70550ac6b30803d6f449719b853200e35","modified":1660163874502},{"_id":"public/js/jquery.nav.js","hash":"ef2160a456176a4d09cc0b95d52b27dfbbadf2d8","modified":1660163874503},{"_id":"public/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1660163874503},{"_id":"public/js/toc.js","hash":"41e52551731854224c249d53010c1bae5aa92ffa","modified":1660163874503},{"_id":"public/js/totop.js","hash":"c05360f6fc699ac12e794b1764b4a952713a3017","modified":1660163874503},{"_id":"public/img/signature/BeanTechSign-white.png","hash":"34289ed41cf9ddac2d56be46fbb1515b7d5913cd","modified":1660163874503},{"_id":"public/img/avatar/lover.jpg","hash":"1432fa2a6183f595fdfbeca4339eb97a291d6883","modified":1660163874510},{"_id":"public/css/beantech.min.css","hash":"05a06230b1a9eca0b30cece54a397008cb77dc50","modified":1660163874516},{"_id":"public/css/beantech.css","hash":"4c361354fd8e9851923fb21a620bc079380ebcd8","modified":1660163874516},{"_id":"public/css/hux-blog.min.css","hash":"1baef04de262aeb7023d835429b49a805ac4ab40","modified":1660163874516},{"_id":"public/img/header_img/about.jpg","hash":"cbbd3cd96e97d577aebf7d8d16dff4a3c24a7078","modified":1660163874516},{"_id":"public/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1660163874522},{"_id":"public/img/signature/BeanTechSign-black.png","hash":"94b7102e819fd6ee082d3fb0166f4de7458c22ff","modified":1660163874522},{"_id":"public/img/article_header/article_bg.jpg","hash":"e166e126296bca8af18ec9f83924866c3dc6c272","modified":1660163874522},{"_id":"public/img/header_img/archive.jpg","hash":"4c771f6d6a7299e23bc81db85a3c2f29e067fa35","modified":1660163874522},{"_id":"public/img/header_img/archives-widget.jpg","hash":"424549c591dadd07566fc3c2b2a1f9e2e1f211ab","modified":1660163874525},{"_id":"public/js/bootstrap.js","hash":"f8752e9ae24daec0a0baffd7819122f8c6fd9103","modified":1660163874537},{"_id":"public/img/article_header/article_header.jpg","hash":"734e37f05703a3aa8be4c61394cb924cf19404b6","modified":1660163874537},{"_id":"public/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1660163874541},{"_id":"public/css/bootstrap.min.css","hash":"fec7b176a4b9a67c0eb5d184f57b84297efc23aa","modified":1660163874547},{"_id":"public/css/bootstrap.css","hash":"41c54bf695145ae0b4d9020a1da308ceb05dcaf3","modified":1660163874549},{"_id":"public/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1660163874555},{"_id":"public/img/header_img/home.png","hash":"c4418661ae0a82442b0b4b411abc01ab53fe64cc","modified":1660163874561},{"_id":"public/img/header_img/home-bg-o.png","hash":"c4418661ae0a82442b0b4b411abc01ab53fe64cc","modified":1660163874563}],"Category":[],"Data":[],"Page":[{"layout":"404","description":"你来到了没有知识的荒原~","header-img":"/img/header_img/404.jpg","_content":"","source":"404.md","raw":"---\nlayout: 404\ndescription: \"你来到了没有知识的荒原~\"\nheader-img: \"/img/header_img/404.jpg\"\n---\n","date":"2022-08-10T15:47:08.725Z","updated":"2022-08-10T15:47:08.725Z","path":"404.html","title":"","comments":1,"_id":"cl6o2pfcq0000r9vdnbf4msby","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"about","title":"关于","date":"2018-10-03T02:48:33.000Z","description":"Be Yourself!","header-img":"/img/header_img/about.jpg","aplayer":false,"fixed":false,"_content":"\n### 关于我\n\n>非处女座强迫症患者、对产品有极致追求的rookie程序猿。\n>\n>偶尔玩玩魔方，看看电影、话剧。\n\n### 联系我\n\n>Email: aiup1995@163.com | aiup1995@gmail.com | aiup1995@yahoo.com\n\n","source":"about/index.md","raw":"---\nlayout: \"about\"\ntitle: \"关于\"\ndate: 2018-10-03 10:48:33\ndescription: \"Be Yourself!\"\nheader-img: \"/img/header_img/about.jpg\"\naplayer: false\nfixed: false\n---\n\n### 关于我\n\n>非处女座强迫症患者、对产品有极致追求的rookie程序猿。\n>\n>偶尔玩玩魔方，看看电影、话剧。\n\n### 联系我\n\n>Email: aiup1995@163.com | aiup1995@gmail.com | aiup1995@yahoo.com\n\n","updated":"2022-08-10T15:47:08.725Z","path":"about/index.html","comments":1,"_id":"cl6o2pfdl0002r9vd8fj2et48","content":"<h3 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h3><blockquote>\n<p>非处女座强迫症患者、对产品有极致追求的rookie程序猿。</p>\n<p>偶尔玩玩魔方，看看电影、话剧。</p>\n</blockquote>\n<h3 id=\"联系我\"><a href=\"#联系我\" class=\"headerlink\" title=\"联系我\"></a>联系我</h3><blockquote>\n<p>Email: <a href=\"mailto:aiup1995@163.com\" target=\"_blank\" rel=\"noopener\">aiup1995@163.com</a> | <a href=\"mailto:aiup1995@gmail.com\" target=\"_blank\" rel=\"noopener\">aiup1995@gmail.com</a> | <a href=\"mailto:aiup1995@yahoo.com\" target=\"_blank\" rel=\"noopener\">aiup1995@yahoo.com</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h3><blockquote>\n<p>非处女座强迫症患者、对产品有极致追求的rookie程序猿。</p>\n<p>偶尔玩玩魔方，看看电影、话剧。</p>\n</blockquote>\n<h3 id=\"联系我\"><a href=\"#联系我\" class=\"headerlink\" title=\"联系我\"></a>联系我</h3><blockquote>\n<p>Email: <a href=\"mailto:aiup1995@163.com\" target=\"_blank\" rel=\"noopener\">aiup1995@163.com</a> | <a href=\"mailto:aiup1995@gmail.com\" target=\"_blank\" rel=\"noopener\">aiup1995@gmail.com</a> | <a href=\"mailto:aiup1995@yahoo.com\" target=\"_blank\" rel=\"noopener\">aiup1995@yahoo.com</a></p>\n</blockquote>\n"},{"layout":"archive","title":"归档","date":"2018-09-20T12:49:56.000Z","description":"Go Ahead Everyday!","header-img":"/img/header_img/archive.jpg","comments":0,"_content":"","source":"archive/index.md","raw":"---\nlayout: \"archive\"\ntitle: \"归档\"\ndate: 2018-09-20 20:49:56\ndescription: \"Go Ahead Everyday!\"\nheader-img: \"/img/header_img/archive.jpg\"\ncomments: false\n---\n","updated":"2022-08-10T15:47:08.725Z","path":"archive/index.html","_id":"cl6o2pfdn0004r9vd0ekkfsme","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"tags","title":"标签","type":"tags","description":"Hey, Tags~","header-img":"/img/header_img/tag.jpg","_content":"","source":"tags/index.md","raw":"---\nlayout: \"tags\"\ntitle: \"标签\"\ntype: \"tags\"\ndescription: \"Hey, Tags~\"\nheader-img: \"/img/header_img/tag.jpg\"\n---\n","date":"2022-08-10T15:47:08.753Z","updated":"2022-08-10T15:47:08.753Z","path":"tags/index.html","comments":1,"_id":"cl6o2pfdr0006r9vdsv9cjsma","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Markdown语法","catalog":true,"date":"2017-08-21T02:39:56.000Z","subtitle":null,"header-img":null,"_content":"\nMarkdown语法主要分为如下几大部分：\n**标题**，**段落**，**区块引用**，**代码区块**，**强调**，**列表**，**分割线**，**链接**，**图片**，**反斜杠 `\\`**，**符号'`'**。\n\n#### I. 标题\n两种形式：  \n1）使用`=`和`-`标记一级和二级标题。\n> 一级标题   \n> `=========`   \n> 二级标题    \n> `---------`\n\n效果：\n> 一级标题   \n> =========   \n> 二级标题\n> ---------  \n\n2）使用`#`，可表示1-6级标题。\n> \\# 一级标题   \n> \\## 二级标题   \n> \\### 三级标题   \n> \\#### 四级标题   \n> \\##### 五级标题   \n> \\###### 六级标题    \n\n效果：\n> # 一级标题   \n> ## 二级标题   \n> ### 三级标题   \n> #### 四级标题   \n> ##### 五级标题   \n> ###### 六级标题\n\n#### II. 段落\n段落的前后要有空行，所谓的空行是指没有文字内容。若想在段内强制换行的方式是使用**两个以上**空格加上回车（引用中换行省略回车）。\n\n#### III. 区块引用\n在段落的每行或者只在第一行使用符号`>`,还可使用多个嵌套引用，如：\n> \\> 区块引用  \n> \\>> 嵌套引用  \n\n效果：\n> 区块引用  \n>> 嵌套引用\n\n#### IV. 代码区块\n代码区块的建立是在每行加上4个空格或者一个制表符（如同写代码一样）。如    \n普通段落：\n\nvoid main()    \n{    \n    printf(\"Hello, Markdown.\");    \n}    \n\n代码区块：\n\n    void main()\n    {\n        printf(\"Hello, Markdown.\");\n    }\n\n**注意**:需要和普通段落之间存在空行。\n\n#### V. 强调\n在强调内容两侧分别加上`*`或者`_`，如：\n> \\*斜体\\*，\\_斜体\\_    \n> \\*\\*粗体\\*\\*，\\_\\_粗体\\_\\_\n\n效果：\n> *斜体*，_斜体_    \n> **粗体**，__粗体__\n\n#### VI. 列表\n使用`*`、`+`、或`-`标记无序列表，如：\n> \\-（+\\*） 第一项\n> \\-（+\\*） 第二项\n> \\- （+\\*）第三项\n\n**注意**：标记后面最少有一个_空格_或_制表符_。若不在引用区块中，必须和前方段落之间存在空行。\n\n效果：\n> + 第一项\n> + 第二项\n> + 第三项\n\n有序列表的标记方式是将上述的符号换成数字,并辅以`.`，如：\n> 1 . 第一项   \n> 2 . 第二项    \n> 3 . 第三项    \n\n效果：\n> 1. 第一项\n> 2. 第二项\n> 3. 第三项\n\n#### VII. 分割线\n分割线最常使用就是三个或以上`*`，还可以使用`-`和`_`。\n\n#### VIII. 链接\n链接可以由两种形式生成：**行内式**和**参考式**。    \n**行内式**：\n> \\[younghz的Markdown库\\]\\(https:://github.com/younghz/Markdown \"Markdown\"\\)。\n\n效果：\n> [younghz的Markdown库](https:://github.com/younghz/Markdown \"Markdown\")。\n\n**参考式**：\n> \\[younghz的Markdown库1\\]\\[1\\]    \n> \\[younghz的Markdown库2\\]\\[2\\]    \n> \\[1\\]:https:://github.com/younghz/Markdown \"Markdown\"    \n> \\[2\\]:https:://github.com/younghz/Markdown \"Markdown\"    \n\n效果：\n> [younghz的Markdown库1][1]    \n> [younghz的Markdown库2][2]\n\n[1]: https:://github.com/younghz/Markdown \"Markdown\"\n[2]: https:://github.com/younghz/Markdown \"Markdown\"\n\n**注意**：上述的`[1]:https:://github.com/younghz/Markdown \"Markdown\"`不出现在区块中。\n\n#### IX. 图片\n添加图片的形式和链接相似，只需在链接的基础上前方加一个`！`。\n#### X. 反斜杠`\\`\n相当于**反转义**作用。使符号成为普通符号。\n#### XI. 符号'`'\n起到标记作用。如：\n>\\`ctrl+a\\`\n\n效果：\n>`ctrl+a`    \n\n#### XII. 尝试一下\n+ **Chrome**下的插件诸如`stackedit`与`markdown-here`等非常方便，也不用担心平台受限。\n+ **在线**的dillinger.io评价也不错   \n+ **Windowns**下的MarkdownPad也用过，不过免费版的体验不是很好。    \n+ **Mac**下的Mou是国人贡献的，口碑很好。\n+ **Linux**下的ReText不错。    \n\n**当然，最终境界永远都是笔下是语法，心中格式化 :)。**\n\n****\n**注意**：不同的Markdown解释器或工具对相应语法（扩展语法）的解释效果不尽相同，具体可参见工具的使用说明。\n虽然有人想出面搞一个所谓的标准化的Markdown，[没想到还惹怒了健在的创始人John Gruber]\n(http://blog.codinghorror.com/standard-markdown-is-now-common-markdown/)。\n****\n以上基本是所有traditonal markdown的语法。\n\n转自[younghz的Markdown库](https:://github.com/younghz/Markdown \"Markdown\")","source":"_posts/markdown.md","raw":"---\ntitle: Markdown语法\ncatalog: true\ndate: 2017-08-21 10:39:56\nsubtitle:\nheader-img:\ntags:\n- Markdown\n---\n\nMarkdown语法主要分为如下几大部分：\n**标题**，**段落**，**区块引用**，**代码区块**，**强调**，**列表**，**分割线**，**链接**，**图片**，**反斜杠 `\\`**，**符号'`'**。\n\n#### I. 标题\n两种形式：  \n1）使用`=`和`-`标记一级和二级标题。\n> 一级标题   \n> `=========`   \n> 二级标题    \n> `---------`\n\n效果：\n> 一级标题   \n> =========   \n> 二级标题\n> ---------  \n\n2）使用`#`，可表示1-6级标题。\n> \\# 一级标题   \n> \\## 二级标题   \n> \\### 三级标题   \n> \\#### 四级标题   \n> \\##### 五级标题   \n> \\###### 六级标题    \n\n效果：\n> # 一级标题   \n> ## 二级标题   \n> ### 三级标题   \n> #### 四级标题   \n> ##### 五级标题   \n> ###### 六级标题\n\n#### II. 段落\n段落的前后要有空行，所谓的空行是指没有文字内容。若想在段内强制换行的方式是使用**两个以上**空格加上回车（引用中换行省略回车）。\n\n#### III. 区块引用\n在段落的每行或者只在第一行使用符号`>`,还可使用多个嵌套引用，如：\n> \\> 区块引用  \n> \\>> 嵌套引用  \n\n效果：\n> 区块引用  \n>> 嵌套引用\n\n#### IV. 代码区块\n代码区块的建立是在每行加上4个空格或者一个制表符（如同写代码一样）。如    \n普通段落：\n\nvoid main()    \n{    \n    printf(\"Hello, Markdown.\");    \n}    \n\n代码区块：\n\n    void main()\n    {\n        printf(\"Hello, Markdown.\");\n    }\n\n**注意**:需要和普通段落之间存在空行。\n\n#### V. 强调\n在强调内容两侧分别加上`*`或者`_`，如：\n> \\*斜体\\*，\\_斜体\\_    \n> \\*\\*粗体\\*\\*，\\_\\_粗体\\_\\_\n\n效果：\n> *斜体*，_斜体_    \n> **粗体**，__粗体__\n\n#### VI. 列表\n使用`*`、`+`、或`-`标记无序列表，如：\n> \\-（+\\*） 第一项\n> \\-（+\\*） 第二项\n> \\- （+\\*）第三项\n\n**注意**：标记后面最少有一个_空格_或_制表符_。若不在引用区块中，必须和前方段落之间存在空行。\n\n效果：\n> + 第一项\n> + 第二项\n> + 第三项\n\n有序列表的标记方式是将上述的符号换成数字,并辅以`.`，如：\n> 1 . 第一项   \n> 2 . 第二项    \n> 3 . 第三项    \n\n效果：\n> 1. 第一项\n> 2. 第二项\n> 3. 第三项\n\n#### VII. 分割线\n分割线最常使用就是三个或以上`*`，还可以使用`-`和`_`。\n\n#### VIII. 链接\n链接可以由两种形式生成：**行内式**和**参考式**。    \n**行内式**：\n> \\[younghz的Markdown库\\]\\(https:://github.com/younghz/Markdown \"Markdown\"\\)。\n\n效果：\n> [younghz的Markdown库](https:://github.com/younghz/Markdown \"Markdown\")。\n\n**参考式**：\n> \\[younghz的Markdown库1\\]\\[1\\]    \n> \\[younghz的Markdown库2\\]\\[2\\]    \n> \\[1\\]:https:://github.com/younghz/Markdown \"Markdown\"    \n> \\[2\\]:https:://github.com/younghz/Markdown \"Markdown\"    \n\n效果：\n> [younghz的Markdown库1][1]    \n> [younghz的Markdown库2][2]\n\n[1]: https:://github.com/younghz/Markdown \"Markdown\"\n[2]: https:://github.com/younghz/Markdown \"Markdown\"\n\n**注意**：上述的`[1]:https:://github.com/younghz/Markdown \"Markdown\"`不出现在区块中。\n\n#### IX. 图片\n添加图片的形式和链接相似，只需在链接的基础上前方加一个`！`。\n#### X. 反斜杠`\\`\n相当于**反转义**作用。使符号成为普通符号。\n#### XI. 符号'`'\n起到标记作用。如：\n>\\`ctrl+a\\`\n\n效果：\n>`ctrl+a`    \n\n#### XII. 尝试一下\n+ **Chrome**下的插件诸如`stackedit`与`markdown-here`等非常方便，也不用担心平台受限。\n+ **在线**的dillinger.io评价也不错   \n+ **Windowns**下的MarkdownPad也用过，不过免费版的体验不是很好。    \n+ **Mac**下的Mou是国人贡献的，口碑很好。\n+ **Linux**下的ReText不错。    \n\n**当然，最终境界永远都是笔下是语法，心中格式化 :)。**\n\n****\n**注意**：不同的Markdown解释器或工具对相应语法（扩展语法）的解释效果不尽相同，具体可参见工具的使用说明。\n虽然有人想出面搞一个所谓的标准化的Markdown，[没想到还惹怒了健在的创始人John Gruber]\n(http://blog.codinghorror.com/standard-markdown-is-now-common-markdown/)。\n****\n以上基本是所有traditonal markdown的语法。\n\n转自[younghz的Markdown库](https:://github.com/younghz/Markdown \"Markdown\")","slug":"markdown","published":1,"updated":"2022-08-10T15:47:08.725Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6o2pfdg0001r9vdf5ktsc03","content":"<p>Markdown语法主要分为如下几大部分：<br><strong>标题</strong>，<strong>段落</strong>，<strong>区块引用</strong>，<strong>代码区块</strong>，<strong>强调</strong>，<strong>列表</strong>，<strong>分割线</strong>，<strong>链接</strong>，<strong>图片</strong>，<strong>反斜杠 <code>\\</code></strong>，<strong>符号’`’</strong>。</p>\n<h4 id=\"I-标题\"><a href=\"#I-标题\" class=\"headerlink\" title=\"I. 标题\"></a>I. 标题</h4><p>两种形式：<br>1）使用<code>=</code>和<code>-</code>标记一级和二级标题。</p>\n<blockquote>\n<p>一级标题<br><code>=========</code><br>二级标题<br><code>---------</code></p>\n</blockquote>\n<p>效果：</p>\n<blockquote>\n<h1 id=\"一级标题\"><a href=\"#一级标题\" class=\"headerlink\" title=\"一级标题   \"></a>一级标题   </h1><h2 id=\"二级标题\"><a href=\"#二级标题\" class=\"headerlink\" title=\"二级标题\"></a>二级标题</h2></blockquote>\n<p>2）使用<code>#</code>，可表示1-6级标题。</p>\n<blockquote>\n<p># 一级标题<br>## 二级标题<br>### 三级标题<br>#### 四级标题<br>##### 五级标题<br>###### 六级标题    </p>\n</blockquote>\n<p>效果：</p>\n<blockquote>\n<h1 id=\"一级标题-1\"><a href=\"#一级标题-1\" class=\"headerlink\" title=\"一级标题\"></a>一级标题</h1><h2 id=\"二级标题-1\"><a href=\"#二级标题-1\" class=\"headerlink\" title=\"二级标题\"></a>二级标题</h2><h3 id=\"三级标题\"><a href=\"#三级标题\" class=\"headerlink\" title=\"三级标题\"></a>三级标题</h3><h4 id=\"四级标题\"><a href=\"#四级标题\" class=\"headerlink\" title=\"四级标题\"></a>四级标题</h4><h5 id=\"五级标题\"><a href=\"#五级标题\" class=\"headerlink\" title=\"五级标题\"></a>五级标题</h5><h6 id=\"六级标题\"><a href=\"#六级标题\" class=\"headerlink\" title=\"六级标题\"></a>六级标题</h6></blockquote>\n<h4 id=\"II-段落\"><a href=\"#II-段落\" class=\"headerlink\" title=\"II. 段落\"></a>II. 段落</h4><p>段落的前后要有空行，所谓的空行是指没有文字内容。若想在段内强制换行的方式是使用<strong>两个以上</strong>空格加上回车（引用中换行省略回车）。</p>\n<h4 id=\"III-区块引用\"><a href=\"#III-区块引用\" class=\"headerlink\" title=\"III. 区块引用\"></a>III. 区块引用</h4><p>在段落的每行或者只在第一行使用符号<code>&gt;</code>,还可使用多个嵌套引用，如：</p>\n<blockquote>\n<p>> 区块引用<br>>&gt; 嵌套引用  </p>\n</blockquote>\n<p>效果：</p>\n<blockquote>\n<p>区块引用  </p>\n<blockquote>\n<p>嵌套引用</p>\n</blockquote>\n</blockquote>\n<h4 id=\"IV-代码区块\"><a href=\"#IV-代码区块\" class=\"headerlink\" title=\"IV. 代码区块\"></a>IV. 代码区块</h4><p>代码区块的建立是在每行加上4个空格或者一个制表符（如同写代码一样）。如<br>普通段落：</p>\n<p>void main()<br>{<br>    printf(“Hello, Markdown.”);<br>}    </p>\n<p>代码区块：</p>\n<pre><code>void main()\n{\n    printf(&quot;Hello, Markdown.&quot;);\n}\n</code></pre><p><strong>注意</strong>:需要和普通段落之间存在空行。</p>\n<h4 id=\"V-强调\"><a href=\"#V-强调\" class=\"headerlink\" title=\"V. 强调\"></a>V. 强调</h4><p>在强调内容两侧分别加上<code>*</code>或者<code>_</code>，如：</p>\n<blockquote>\n<p>*斜体*，_斜体_<br>**粗体**，__粗体__</p>\n</blockquote>\n<p>效果：</p>\n<blockquote>\n<p><em>斜体</em>，_斜体_<br><strong>粗体</strong>，<strong>粗体</strong></p>\n</blockquote>\n<h4 id=\"VI-列表\"><a href=\"#VI-列表\" class=\"headerlink\" title=\"VI. 列表\"></a>VI. 列表</h4><p>使用<code>*</code>、<code>+</code>、或<code>-</code>标记无序列表，如：</p>\n<blockquote>\n<p>-（+*） 第一项<br>-（+*） 第二项<br>- （+*）第三项</p>\n</blockquote>\n<p><strong>注意</strong>：标记后面最少有一个_空格_或<em>制表符</em>。若不在引用区块中，必须和前方段落之间存在空行。</p>\n<p>效果：</p>\n<blockquote>\n<ul>\n<li>第一项</li>\n<li>第二项</li>\n<li>第三项</li>\n</ul>\n</blockquote>\n<p>有序列表的标记方式是将上述的符号换成数字,并辅以<code>.</code>，如：</p>\n<blockquote>\n<p>1 . 第一项<br>2 . 第二项<br>3 . 第三项    </p>\n</blockquote>\n<p>效果：</p>\n<blockquote>\n<ol>\n<li>第一项</li>\n<li>第二项</li>\n<li>第三项</li>\n</ol>\n</blockquote>\n<h4 id=\"VII-分割线\"><a href=\"#VII-分割线\" class=\"headerlink\" title=\"VII. 分割线\"></a>VII. 分割线</h4><p>分割线最常使用就是三个或以上<code>*</code>，还可以使用<code>-</code>和<code>_</code>。</p>\n<h4 id=\"VIII-链接\"><a href=\"#VIII-链接\" class=\"headerlink\" title=\"VIII. 链接\"></a>VIII. 链接</h4><p>链接可以由两种形式生成：<strong>行内式</strong>和<strong>参考式</strong>。<br><strong>行内式</strong>：</p>\n<blockquote>\n<p>[younghz的Markdown库](https:://github.com/younghz/Markdown “Markdown”)。</p>\n</blockquote>\n<p>效果：</p>\n<blockquote>\n<p><a href=\"https:://github.com/younghz/Markdown\" title=\"Markdown\" target=\"_blank\" rel=\"noopener\">younghz的Markdown库</a>。</p>\n</blockquote>\n<p><strong>参考式</strong>：</p>\n<blockquote>\n<p>[younghz的Markdown库1][1]<br>[younghz的Markdown库2][2]<br>[1]:https:://github.com/younghz/Markdown “Markdown”<br>[2]:https:://github.com/younghz/Markdown “Markdown”    </p>\n</blockquote>\n<p>效果：</p>\n<blockquote>\n<p><a href=\"https:://github.com/younghz/Markdown\" title=\"Markdown\" target=\"_blank\" rel=\"noopener\">younghz的Markdown库1</a><br><a href=\"https:://github.com/younghz/Markdown\" title=\"Markdown\" target=\"_blank\" rel=\"noopener\">younghz的Markdown库2</a></p>\n</blockquote>\n<p><strong>注意</strong>：上述的<code>[1]:https:://github.com/younghz/Markdown &quot;Markdown&quot;</code>不出现在区块中。</p>\n<h4 id=\"IX-图片\"><a href=\"#IX-图片\" class=\"headerlink\" title=\"IX. 图片\"></a>IX. 图片</h4><p>添加图片的形式和链接相似，只需在链接的基础上前方加一个<code>！</code>。</p>\n<h4 id=\"X-反斜杠\"><a href=\"#X-反斜杠\" class=\"headerlink\" title=\"X. 反斜杠\\\"></a>X. 反斜杠<code>\\</code></h4><p>相当于<strong>反转义</strong>作用。使符号成为普通符号。</p>\n<h4 id=\"XI-符号’-’\"><a href=\"#XI-符号’-’\" class=\"headerlink\" title=\"XI. 符号’`’\"></a>XI. 符号’`’</h4><p>起到标记作用。如：</p>\n<blockquote>\n<p>`ctrl+a`</p>\n</blockquote>\n<p>效果：</p>\n<blockquote>\n<p><code>ctrl+a</code>    </p>\n</blockquote>\n<h4 id=\"XII-尝试一下\"><a href=\"#XII-尝试一下\" class=\"headerlink\" title=\"XII. 尝试一下\"></a>XII. 尝试一下</h4><ul>\n<li><strong>Chrome</strong>下的插件诸如<code>stackedit</code>与<code>markdown-here</code>等非常方便，也不用担心平台受限。</li>\n<li><strong>在线</strong>的dillinger.io评价也不错   </li>\n<li><strong>Windowns</strong>下的MarkdownPad也用过，不过免费版的体验不是很好。    </li>\n<li><strong>Mac</strong>下的Mou是国人贡献的，口碑很好。</li>\n<li><strong>Linux</strong>下的ReText不错。    </li>\n</ul>\n<p><strong>当然，最终境界永远都是笔下是语法，心中格式化 :)。</strong></p>\n<hr>\n<p><strong>注意</strong>：不同的Markdown解释器或工具对相应语法（扩展语法）的解释效果不尽相同，具体可参见工具的使用说明。<br>虽然有人想出面搞一个所谓的标准化的Markdown，[没想到还惹怒了健在的创始人John Gruber]<br>(<a href=\"http://blog.codinghorror.com/standard-markdown-is-now-common-markdown/)。\" target=\"_blank\" rel=\"noopener\">http://blog.codinghorror.com/standard-markdown-is-now-common-markdown/)。</a></p>\n<hr>\n<p>以上基本是所有traditonal markdown的语法。</p>\n<p>转自<a href=\"https:://github.com/younghz/Markdown\" title=\"Markdown\" target=\"_blank\" rel=\"noopener\">younghz的Markdown库</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Markdown语法主要分为如下几大部分：<br><strong>标题</strong>，<strong>段落</strong>，<strong>区块引用</strong>，<strong>代码区块</strong>，<strong>强调</strong>，<strong>列表</strong>，<strong>分割线</strong>，<strong>链接</strong>，<strong>图片</strong>，<strong>反斜杠 <code>\\</code></strong>，<strong>符号’`’</strong>。</p>\n<h4 id=\"I-标题\"><a href=\"#I-标题\" class=\"headerlink\" title=\"I. 标题\"></a>I. 标题</h4><p>两种形式：<br>1）使用<code>=</code>和<code>-</code>标记一级和二级标题。</p>\n<blockquote>\n<p>一级标题<br><code>=========</code><br>二级标题<br><code>---------</code></p>\n</blockquote>\n<p>效果：</p>\n<blockquote>\n<h1 id=\"一级标题\"><a href=\"#一级标题\" class=\"headerlink\" title=\"一级标题   \"></a>一级标题   </h1><h2 id=\"二级标题\"><a href=\"#二级标题\" class=\"headerlink\" title=\"二级标题\"></a>二级标题</h2></blockquote>\n<p>2）使用<code>#</code>，可表示1-6级标题。</p>\n<blockquote>\n<p># 一级标题<br>## 二级标题<br>### 三级标题<br>#### 四级标题<br>##### 五级标题<br>###### 六级标题    </p>\n</blockquote>\n<p>效果：</p>\n<blockquote>\n<h1 id=\"一级标题-1\"><a href=\"#一级标题-1\" class=\"headerlink\" title=\"一级标题\"></a>一级标题</h1><h2 id=\"二级标题-1\"><a href=\"#二级标题-1\" class=\"headerlink\" title=\"二级标题\"></a>二级标题</h2><h3 id=\"三级标题\"><a href=\"#三级标题\" class=\"headerlink\" title=\"三级标题\"></a>三级标题</h3><h4 id=\"四级标题\"><a href=\"#四级标题\" class=\"headerlink\" title=\"四级标题\"></a>四级标题</h4><h5 id=\"五级标题\"><a href=\"#五级标题\" class=\"headerlink\" title=\"五级标题\"></a>五级标题</h5><h6 id=\"六级标题\"><a href=\"#六级标题\" class=\"headerlink\" title=\"六级标题\"></a>六级标题</h6></blockquote>\n<h4 id=\"II-段落\"><a href=\"#II-段落\" class=\"headerlink\" title=\"II. 段落\"></a>II. 段落</h4><p>段落的前后要有空行，所谓的空行是指没有文字内容。若想在段内强制换行的方式是使用<strong>两个以上</strong>空格加上回车（引用中换行省略回车）。</p>\n<h4 id=\"III-区块引用\"><a href=\"#III-区块引用\" class=\"headerlink\" title=\"III. 区块引用\"></a>III. 区块引用</h4><p>在段落的每行或者只在第一行使用符号<code>&gt;</code>,还可使用多个嵌套引用，如：</p>\n<blockquote>\n<p>> 区块引用<br>>&gt; 嵌套引用  </p>\n</blockquote>\n<p>效果：</p>\n<blockquote>\n<p>区块引用  </p>\n<blockquote>\n<p>嵌套引用</p>\n</blockquote>\n</blockquote>\n<h4 id=\"IV-代码区块\"><a href=\"#IV-代码区块\" class=\"headerlink\" title=\"IV. 代码区块\"></a>IV. 代码区块</h4><p>代码区块的建立是在每行加上4个空格或者一个制表符（如同写代码一样）。如<br>普通段落：</p>\n<p>void main()<br>{<br>    printf(“Hello, Markdown.”);<br>}    </p>\n<p>代码区块：</p>\n<pre><code>void main()\n{\n    printf(&quot;Hello, Markdown.&quot;);\n}\n</code></pre><p><strong>注意</strong>:需要和普通段落之间存在空行。</p>\n<h4 id=\"V-强调\"><a href=\"#V-强调\" class=\"headerlink\" title=\"V. 强调\"></a>V. 强调</h4><p>在强调内容两侧分别加上<code>*</code>或者<code>_</code>，如：</p>\n<blockquote>\n<p>*斜体*，_斜体_<br>**粗体**，__粗体__</p>\n</blockquote>\n<p>效果：</p>\n<blockquote>\n<p><em>斜体</em>，_斜体_<br><strong>粗体</strong>，<strong>粗体</strong></p>\n</blockquote>\n<h4 id=\"VI-列表\"><a href=\"#VI-列表\" class=\"headerlink\" title=\"VI. 列表\"></a>VI. 列表</h4><p>使用<code>*</code>、<code>+</code>、或<code>-</code>标记无序列表，如：</p>\n<blockquote>\n<p>-（+*） 第一项<br>-（+*） 第二项<br>- （+*）第三项</p>\n</blockquote>\n<p><strong>注意</strong>：标记后面最少有一个_空格_或<em>制表符</em>。若不在引用区块中，必须和前方段落之间存在空行。</p>\n<p>效果：</p>\n<blockquote>\n<ul>\n<li>第一项</li>\n<li>第二项</li>\n<li>第三项</li>\n</ul>\n</blockquote>\n<p>有序列表的标记方式是将上述的符号换成数字,并辅以<code>.</code>，如：</p>\n<blockquote>\n<p>1 . 第一项<br>2 . 第二项<br>3 . 第三项    </p>\n</blockquote>\n<p>效果：</p>\n<blockquote>\n<ol>\n<li>第一项</li>\n<li>第二项</li>\n<li>第三项</li>\n</ol>\n</blockquote>\n<h4 id=\"VII-分割线\"><a href=\"#VII-分割线\" class=\"headerlink\" title=\"VII. 分割线\"></a>VII. 分割线</h4><p>分割线最常使用就是三个或以上<code>*</code>，还可以使用<code>-</code>和<code>_</code>。</p>\n<h4 id=\"VIII-链接\"><a href=\"#VIII-链接\" class=\"headerlink\" title=\"VIII. 链接\"></a>VIII. 链接</h4><p>链接可以由两种形式生成：<strong>行内式</strong>和<strong>参考式</strong>。<br><strong>行内式</strong>：</p>\n<blockquote>\n<p>[younghz的Markdown库](https:://github.com/younghz/Markdown “Markdown”)。</p>\n</blockquote>\n<p>效果：</p>\n<blockquote>\n<p><a href=\"https:://github.com/younghz/Markdown\" title=\"Markdown\" target=\"_blank\" rel=\"noopener\">younghz的Markdown库</a>。</p>\n</blockquote>\n<p><strong>参考式</strong>：</p>\n<blockquote>\n<p>[younghz的Markdown库1][1]<br>[younghz的Markdown库2][2]<br>[1]:https:://github.com/younghz/Markdown “Markdown”<br>[2]:https:://github.com/younghz/Markdown “Markdown”    </p>\n</blockquote>\n<p>效果：</p>\n<blockquote>\n<p><a href=\"https:://github.com/younghz/Markdown\" title=\"Markdown\" target=\"_blank\" rel=\"noopener\">younghz的Markdown库1</a><br><a href=\"https:://github.com/younghz/Markdown\" title=\"Markdown\" target=\"_blank\" rel=\"noopener\">younghz的Markdown库2</a></p>\n</blockquote>\n<p><strong>注意</strong>：上述的<code>[1]:https:://github.com/younghz/Markdown &quot;Markdown&quot;</code>不出现在区块中。</p>\n<h4 id=\"IX-图片\"><a href=\"#IX-图片\" class=\"headerlink\" title=\"IX. 图片\"></a>IX. 图片</h4><p>添加图片的形式和链接相似，只需在链接的基础上前方加一个<code>！</code>。</p>\n<h4 id=\"X-反斜杠\"><a href=\"#X-反斜杠\" class=\"headerlink\" title=\"X. 反斜杠\\\"></a>X. 反斜杠<code>\\</code></h4><p>相当于<strong>反转义</strong>作用。使符号成为普通符号。</p>\n<h4 id=\"XI-符号’-’\"><a href=\"#XI-符号’-’\" class=\"headerlink\" title=\"XI. 符号’`’\"></a>XI. 符号’`’</h4><p>起到标记作用。如：</p>\n<blockquote>\n<p>`ctrl+a`</p>\n</blockquote>\n<p>效果：</p>\n<blockquote>\n<p><code>ctrl+a</code>    </p>\n</blockquote>\n<h4 id=\"XII-尝试一下\"><a href=\"#XII-尝试一下\" class=\"headerlink\" title=\"XII. 尝试一下\"></a>XII. 尝试一下</h4><ul>\n<li><strong>Chrome</strong>下的插件诸如<code>stackedit</code>与<code>markdown-here</code>等非常方便，也不用担心平台受限。</li>\n<li><strong>在线</strong>的dillinger.io评价也不错   </li>\n<li><strong>Windowns</strong>下的MarkdownPad也用过，不过免费版的体验不是很好。    </li>\n<li><strong>Mac</strong>下的Mou是国人贡献的，口碑很好。</li>\n<li><strong>Linux</strong>下的ReText不错。    </li>\n</ul>\n<p><strong>当然，最终境界永远都是笔下是语法，心中格式化 :)。</strong></p>\n<hr>\n<p><strong>注意</strong>：不同的Markdown解释器或工具对相应语法（扩展语法）的解释效果不尽相同，具体可参见工具的使用说明。<br>虽然有人想出面搞一个所谓的标准化的Markdown，[没想到还惹怒了健在的创始人John Gruber]<br>(<a href=\"http://blog.codinghorror.com/standard-markdown-is-now-common-markdown/)。\" target=\"_blank\" rel=\"noopener\">http://blog.codinghorror.com/standard-markdown-is-now-common-markdown/)。</a></p>\n<hr>\n<p>以上基本是所有traditonal markdown的语法。</p>\n<p>转自<a href=\"https:://github.com/younghz/Markdown\" title=\"Markdown\" target=\"_blank\" rel=\"noopener\">younghz的Markdown库</a></p>\n"},{"title":"【Linux】孤儿进程和僵尸进程","catalog":true,"date":"2018-01-06T04:31:42.000Z","subtitle":null,"header-img":null,"_content":"\n## 1. 前言\n+ 子进程由父进程执行`fork`创建而来\n+ 子进程和父进程异步运行，即它们无法预知对方行为\n+ 当一个进程完成它的工作`exit`之后，其父进程需要调用`wait`或者`waitpid`函数取得子进程的终止状态，然后内核才会将其释放，否则不仅占用内存，还会占用进程号\n\n## 2. 孤儿进程\n一个父进程退出，而它的一个或多个子进程还在运行，那么那些子进程将成为孤儿进程。孤儿进程将被init进程（进程号为1）所收养，并由init进程对它们完成状态收集工作。\n\n## 3. 僵尸进程\n子进程退出后，其进程控制块（PCB）会驻留内存，同时其退出状态会返回给操作系统，由系统发送`SIGCHLD`信号告知父进程，而父进程如果没有调用`wait`或`waitpid`获取子进程的状态信息，那么PCB仍然保存在系统中占用资源。这种进程称之为僵尸进程。\n\n## 4. 解决分析\n孤儿进程并没有危害，因为其由init接管，有理由相信其安全性。\n而僵尸进程造成的危害上面已经简单提到过了，使用`ps -ef`或`ps aux`可发现其状态为`Z`，其实，僵尸进程是每个进程退出时必经过的状态，也是操作系统提供的能够保证父进程可获取子进程的退出信息的机制，试想一下，如果子进程退出时销毁所有信息，那么即便给父进程发信号父进程也无法再获取到子进程的任何信息了，这是不允许的。\n但是`Z`状态仅应作为一个临时状态，父进程收到信号后应该及时处理它，否则当其大量堆积会造成危害。\n如果发现当前已经存在大量僵尸进程了，我们可以通过kill掉父进程，使这些僵尸进程变成孤儿进程，从而被init进程接管来进一步处理它们。\n想要避免僵尸进程的话，主要有以下两种方法：\n+ fork两次，然后销毁一级子进程，使二级子进程成为孤儿进程，进而被init接管\n+ 父进程收到`SIGCHLD`信号后使用`wait`或`waitpid`及时处理\n","source":"_posts/orphan-zombie.md","raw":"---\ntitle: 【Linux】孤儿进程和僵尸进程\ncatalog: true\ndate: 2018-01-06 12:31:42\nsubtitle:\nheader-img:\ntags:\n- Linux\n---\n\n## 1. 前言\n+ 子进程由父进程执行`fork`创建而来\n+ 子进程和父进程异步运行，即它们无法预知对方行为\n+ 当一个进程完成它的工作`exit`之后，其父进程需要调用`wait`或者`waitpid`函数取得子进程的终止状态，然后内核才会将其释放，否则不仅占用内存，还会占用进程号\n\n## 2. 孤儿进程\n一个父进程退出，而它的一个或多个子进程还在运行，那么那些子进程将成为孤儿进程。孤儿进程将被init进程（进程号为1）所收养，并由init进程对它们完成状态收集工作。\n\n## 3. 僵尸进程\n子进程退出后，其进程控制块（PCB）会驻留内存，同时其退出状态会返回给操作系统，由系统发送`SIGCHLD`信号告知父进程，而父进程如果没有调用`wait`或`waitpid`获取子进程的状态信息，那么PCB仍然保存在系统中占用资源。这种进程称之为僵尸进程。\n\n## 4. 解决分析\n孤儿进程并没有危害，因为其由init接管，有理由相信其安全性。\n而僵尸进程造成的危害上面已经简单提到过了，使用`ps -ef`或`ps aux`可发现其状态为`Z`，其实，僵尸进程是每个进程退出时必经过的状态，也是操作系统提供的能够保证父进程可获取子进程的退出信息的机制，试想一下，如果子进程退出时销毁所有信息，那么即便给父进程发信号父进程也无法再获取到子进程的任何信息了，这是不允许的。\n但是`Z`状态仅应作为一个临时状态，父进程收到信号后应该及时处理它，否则当其大量堆积会造成危害。\n如果发现当前已经存在大量僵尸进程了，我们可以通过kill掉父进程，使这些僵尸进程变成孤儿进程，从而被init进程接管来进一步处理它们。\n想要避免僵尸进程的话，主要有以下两种方法：\n+ fork两次，然后销毁一级子进程，使二级子进程成为孤儿进程，进而被init接管\n+ 父进程收到`SIGCHLD`信号后使用`wait`或`waitpid`及时处理\n","slug":"orphan-zombie","published":1,"updated":"2022-08-10T15:47:08.725Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6o2pfdm0003r9vd9orjyay4","content":"<h2 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1. 前言\"></a>1. 前言</h2><ul>\n<li>子进程由父进程执行<code>fork</code>创建而来</li>\n<li>子进程和父进程异步运行，即它们无法预知对方行为</li>\n<li>当一个进程完成它的工作<code>exit</code>之后，其父进程需要调用<code>wait</code>或者<code>waitpid</code>函数取得子进程的终止状态，然后内核才会将其释放，否则不仅占用内存，还会占用进程号</li>\n</ul>\n<h2 id=\"2-孤儿进程\"><a href=\"#2-孤儿进程\" class=\"headerlink\" title=\"2. 孤儿进程\"></a>2. 孤儿进程</h2><p>一个父进程退出，而它的一个或多个子进程还在运行，那么那些子进程将成为孤儿进程。孤儿进程将被init进程（进程号为1）所收养，并由init进程对它们完成状态收集工作。</p>\n<h2 id=\"3-僵尸进程\"><a href=\"#3-僵尸进程\" class=\"headerlink\" title=\"3. 僵尸进程\"></a>3. 僵尸进程</h2><p>子进程退出后，其进程控制块（PCB）会驻留内存，同时其退出状态会返回给操作系统，由系统发送<code>SIGCHLD</code>信号告知父进程，而父进程如果没有调用<code>wait</code>或<code>waitpid</code>获取子进程的状态信息，那么PCB仍然保存在系统中占用资源。这种进程称之为僵尸进程。</p>\n<h2 id=\"4-解决分析\"><a href=\"#4-解决分析\" class=\"headerlink\" title=\"4. 解决分析\"></a>4. 解决分析</h2><p>孤儿进程并没有危害，因为其由init接管，有理由相信其安全性。<br>而僵尸进程造成的危害上面已经简单提到过了，使用<code>ps -ef</code>或<code>ps aux</code>可发现其状态为<code>Z</code>，其实，僵尸进程是每个进程退出时必经过的状态，也是操作系统提供的能够保证父进程可获取子进程的退出信息的机制，试想一下，如果子进程退出时销毁所有信息，那么即便给父进程发信号父进程也无法再获取到子进程的任何信息了，这是不允许的。<br>但是<code>Z</code>状态仅应作为一个临时状态，父进程收到信号后应该及时处理它，否则当其大量堆积会造成危害。<br>如果发现当前已经存在大量僵尸进程了，我们可以通过kill掉父进程，使这些僵尸进程变成孤儿进程，从而被init进程接管来进一步处理它们。<br>想要避免僵尸进程的话，主要有以下两种方法：</p>\n<ul>\n<li>fork两次，然后销毁一级子进程，使二级子进程成为孤儿进程，进而被init接管</li>\n<li>父进程收到<code>SIGCHLD</code>信号后使用<code>wait</code>或<code>waitpid</code>及时处理</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1. 前言\"></a>1. 前言</h2><ul>\n<li>子进程由父进程执行<code>fork</code>创建而来</li>\n<li>子进程和父进程异步运行，即它们无法预知对方行为</li>\n<li>当一个进程完成它的工作<code>exit</code>之后，其父进程需要调用<code>wait</code>或者<code>waitpid</code>函数取得子进程的终止状态，然后内核才会将其释放，否则不仅占用内存，还会占用进程号</li>\n</ul>\n<h2 id=\"2-孤儿进程\"><a href=\"#2-孤儿进程\" class=\"headerlink\" title=\"2. 孤儿进程\"></a>2. 孤儿进程</h2><p>一个父进程退出，而它的一个或多个子进程还在运行，那么那些子进程将成为孤儿进程。孤儿进程将被init进程（进程号为1）所收养，并由init进程对它们完成状态收集工作。</p>\n<h2 id=\"3-僵尸进程\"><a href=\"#3-僵尸进程\" class=\"headerlink\" title=\"3. 僵尸进程\"></a>3. 僵尸进程</h2><p>子进程退出后，其进程控制块（PCB）会驻留内存，同时其退出状态会返回给操作系统，由系统发送<code>SIGCHLD</code>信号告知父进程，而父进程如果没有调用<code>wait</code>或<code>waitpid</code>获取子进程的状态信息，那么PCB仍然保存在系统中占用资源。这种进程称之为僵尸进程。</p>\n<h2 id=\"4-解决分析\"><a href=\"#4-解决分析\" class=\"headerlink\" title=\"4. 解决分析\"></a>4. 解决分析</h2><p>孤儿进程并没有危害，因为其由init接管，有理由相信其安全性。<br>而僵尸进程造成的危害上面已经简单提到过了，使用<code>ps -ef</code>或<code>ps aux</code>可发现其状态为<code>Z</code>，其实，僵尸进程是每个进程退出时必经过的状态，也是操作系统提供的能够保证父进程可获取子进程的退出信息的机制，试想一下，如果子进程退出时销毁所有信息，那么即便给父进程发信号父进程也无法再获取到子进程的任何信息了，这是不允许的。<br>但是<code>Z</code>状态仅应作为一个临时状态，父进程收到信号后应该及时处理它，否则当其大量堆积会造成危害。<br>如果发现当前已经存在大量僵尸进程了，我们可以通过kill掉父进程，使这些僵尸进程变成孤儿进程，从而被init进程接管来进一步处理它们。<br>想要避免僵尸进程的话，主要有以下两种方法：</p>\n<ul>\n<li>fork两次，然后销毁一级子进程，使二级子进程成为孤儿进程，进而被init接管</li>\n<li>父进程收到<code>SIGCHLD</code>信号后使用<code>wait</code>或<code>waitpid</code>及时处理</li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cl6o2pfdg0001r9vdf5ktsc03","tag_id":"cl6o2pfdp0005r9vdx1jqj6bs","_id":"cl6o2pfdt0008r9vdf2d153d8"},{"post_id":"cl6o2pfdm0003r9vd9orjyay4","tag_id":"cl6o2pfds0007r9vdojpnu3v8","_id":"cl6o2pfdu0009r9vd870t5go7"}],"Tag":[{"name":"Markdown","_id":"cl6o2pfdp0005r9vdx1jqj6bs"},{"name":"Linux","_id":"cl6o2pfds0007r9vdojpnu3v8"}]}}
